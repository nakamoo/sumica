var currentScale = 1;var $container = $("#page");var instance = null;var platforms = null;var nodeBlacklist = [];var myDragOptions = {    //grid: [20, 20], containment: true}; var connectorHoverStyle = {            strokeWidth: 3,            stroke: "white"        },        endpointHoverStyle = {            fill: "white"        },        imageSourceEndpoint = {            endpoint: "Dot",            paintStyle: {fill: "dodgerblue", radius: 10},            isSource: true,            connector: ["Bezier", {stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true}],            connectorStyle: {                strokeWidth: 3,                stroke: "dodgerblue",                joinstyle: "round"            },            hoverPaintStyle: endpointHoverStyle,            connectorHoverStyle: connectorHoverStyle,            scope: "image",            maxConnections: -1        },        imageTargetEndpoint = {            endpoint: "Dot",            paintStyle: {fill: "dodgerblue", radius: 10},            maxConnections: -1,            dropOptions: {hoverClass: "hover", activeClass: "active"},            scope: "image",            isTarget: true        },        booleanSourceEndpoint = {            endpoint: "Dot",            paintStyle: {fill: "orange", radius: 10},            hoverPaintStyle: endpointHoverStyle,            maxConnections: -1,            scope: "action",            isSource: true,            connector: ["Bezier", {stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true}],            connectorStyle: {                strokeWidth: 3,                stroke: "orange",                joinstyle: "round"            },            connectorHoverStyle: connectorHoverStyle        },        booleanTargetEndpoint = {            endpoint: "Dot",            paintStyle: {fill: "orange", radius: 10},            maxConnections: -1,            scope: "action",            isTarget: true        };$.get({        url: "/node_types",        success: function (data) {            platforms = data;            var dropdown = $('#selectPlatform');            for (var i = 0; i < data.length; i++) {                dropdown.append($('<option>', {                    text: data[i].display_name,                    value: i                }));            }        },        async: false    });$(window).on('load', function () {    $('body').append('<div id="hiddenStuff" style="display: none;"></div>');    for (var i = 0; i < platforms.length; i++) {        if (platforms[i].param_file.length > 0) {            console.log("loading " + platforms[i].param_file);            $('<div id="platform-' + platforms[i].name + '"></div>').load("static/html/" + platforms[i].param_file).appendTo('#hiddenStuff');        }    }});// init connector and endpoint types// organize layout of graph with dagrevar dagreLayout = function (updateIds) {    var g = new dagre.graphlib.Graph();    g.setGraph({rankdir: 'LR', ranksep: 300, nodesep: 10});    g.setDefaultEdgeLabel(function () {        return {};    });    $('.item').each(        function (idx, node) {            var n = $(node);            g.setNode(n.attr('id'), {                width: Math.round(n.width()),                height: Math.round(n.height())            });            console.log(n.width());        }    );    instance.getAllConnections().forEach(        function (edge) {            g.setEdge(                edge.source.id,                edge.target.id            );        });    dagre.layout(g);    // Applying the calculated layout    g.nodes().forEach(        function (n) {            if (updateIds.includes(n)) {                $('#' + n).css('left', g.node(n).x + 'px');                $('#' + n).css('top', g.node(n).y + 'px');            }        });    instance.repaintEverything();    return g.graph();};var newImageNode = function (x, y, imsrc, id) {        var n = initGeneralNode(x, y, id, [], ['image'], 50);        n.body.style.borderRadius = 0;        n.delButton.css('left', "35px");        n.delButton.css('top', "-15px");        var img = $('<img class="itemimage" src="' + imsrc + '" >');        $(n.body).append(img);        //instance.addEndpoint(n.main, imageSourceEndpoint, {anchor: ["RightMiddle"], uuid: n.main.id + '-source'});        return n.main;    };var newLabelNode = function (x, y, text, id) {    var n = initGeneralNode(x, y, id, ['image'], ['activity']);    n.body.style.backgroundColor = "#1A5276";    var text = $('<p style="margin: 0; z-index: 2; color:white; font-weight:bold;">' + text + '</p>');    $(n.body).append(text);    var icon = '<i style="font-size:3em; position: absolute; color: #5499C7; z-index: 1" class="fas fa-tag"></i>';    $(n.body).append(icon);    //instance.addEndpoint(n.main, labelTargetEndpoint, {anchor: ["LeftMiddle"], uuid: n.main.id + '-target'});    //instance.addEndpoint(n.main, labelSourceEndpoint, {anchor: ["RightMiddle"], uuid: n.main.id + "-source"});    return n.main;};var initGeneralNode = function (x, y, id, inputs, outputs, size) {        var node = document.createElement("div");        var body = document.createElement("div");        body.className = "itembody";        var $node = $(node);        $node.append($(body));        node.className = "item";        node.id = id;        node.style.left = x + "px";        node.style.top = y + "px";        size = size || "80px";        node.style.width = size + "px";        node.style.height = size + "px";        body.style.width = size + "px";        body.style.height = size + "px";        instance.setDraggable(node, true);        instance.getContainer().appendChild(node);        var intervalY = 1.0 / (inputs.length + 1.0);        for (var i = 0; i < inputs.length; i++) {            var type = inputs[i];            var endpointType = null;            if (type == "boolean" || type == "activity") {                endpointType = booleanTargetEndpoint;            } else if (type == "image") {                endpointType = imageTargetEndpoint;            }            if (endpointType != null) {                instance.addEndpoint(node, endpointType, {                    anchor: [0, intervalY * (i + 1), -1, 0],                    uuid: node.id + '-target-' + i                });                console.log(node.id + '-target-' + i);            }        }        var intervalY = 1.0 / (outputs.length + 1.0);        for (var i = 0; i < outputs.length; i++) {            var type = outputs[i];            var endpointType = null;            if (type == "boolean" || type == "activity") {                endpointType = booleanSourceEndpoint;            } else if (type == "image") {                endpointType = imageSourceEndpoint;            }            if (endpointType != null) {                instance.addEndpoint(node, endpointType, {                    anchor: [1, intervalY * (i + 1), 1, 0],                    uuid: node.id + '-source-' + i                });            }        }        var $body = $(body);        if (DEBUG >= 0) {            $body.data('dOn', false);            $body.click(function () {                $body.data('dOn', !$body.data('dOn'));                setTimeout(function() {                    if ($body.data('dOn')) {                        instance.select({source: node.id}).each(function (connection) {                            connection.setType("activeBoolean");                        });                        $node.css("box-shadow", "0 0 50px 10px #0ff");                        instance.select({source: node.id}).each(function (connection) {                        });                    } else {                        instance.select({source: node.id}).each(function (connection) {                            connection.setType("inactiveBoolean");                        });                        $node.css("box-shadow", "none");                    }                }, DEBUG*1000)            });        }        var $node = $(node);        var delButton = $('<button type="button" class="btn btn-circle btn-sm deleteButton">' +            '<span class="fa fa-times" aria-hidden="true"></span>' +            '</button>');        $node.append(delButton);        delButton.css("display", "none");        delButton.click(            function () {                instance.remove(node);                nodeBlacklist.push(node.id);            }        );        $node.data('nodeType', type);        $node.mouseover(function () {            delButton.css("display", "inline");        }).mouseout(function () {            delButton.css("display", "none");        });        $node.draggable({        start: function (e) {            var pz = $container.find(".panzoom");            currentScale = pz.panzoom("getMatrix")[0];            $(this).css("cursor", "move");            //pz.panzoom("disable");            $(this).addClass('noclick');        },        drag: function (e, ui) {            //ui.position.left = Math.round(ui.position.left / currentScale / 20.0) * 20.0;            //ui.position.top = Math.round(ui.position.top / currentScale / 20.0) * 20.0;            ui.position.left = ui.position.left / currentScale;            ui.position.top = ui.position.top / currentScale;            if ($(this).hasClass("ui-draggable")) {                instance.repaint($(this).attr('id'), ui.position);            }        },        stop: function (e, ui) {            var nodeId = $(this).attr('id');            if ($(this).hasClass("ui-draggable")) {                instance.repaint(nodeId, ui.position);            }            $(this).css("cursor", "");            $container.find(".panzoom").panzoom("enable");            //hacky            setTimeout(function () {                console.log($(this));                $(this).removeClass('noclick');            }, 100);        }//, grid: [20, 20], containment: true    });        return {body: body, main: node, delButton: delButton};    };var updateFlowchart = null;jsPlumb.ready(function () {    var minScale = 0.1;    var maxScale = 3;    var incScale = 0.05;    instance = window.jsp = jsPlumb.getInstance({        DragOptions: {cursor: 'pointer', zIndex: 2000},        ConnectionOverlays: [            ["Arrow", {                location: 0.5,                visible: true,                width: 20,                length: 20,                id: "ARROW",                events: {}            }]        ],        Container: "flowchartcanvas"    });    var activeType = {        cssClass:"connector-active"    };    instance.registerConnectionType("activeBoolean", activeType);    var inactiveType = {        cssClass:""    };    instance.registerConnectionType("inactiveBoolean", inactiveType);//node creation    function updateBG(matrix) {        var followX = -matrix[4] / matrix[0];        var followY = -matrix[5] / matrix[0];        var screenW = $('#flowchartabscontainer').width() / minScale;        var width = screenW * 2.0;        var interval = 500;        $('#flowchartbg').css({            left: Math.round(followX / interval) * interval - screenW / 2.0,            top: Math.round(followY / interval) * interval - screenW / 2.0, width: width, height: width        });    };    $panzoom = $container.find('.panzoom').panzoom({        minScale: minScale,//0.4        maxScale: maxScale,//2        increment: incScale,//0.1        cursor: "",        ignoreChildrensEvents: true    }).on("panzoomstart", function (e, pz, ev) {        $panzoom.css("cursor", "move");//set "move" cursor on start only    })        .on("panzoomend", function (e, pz) {            $panzoom.css("cursor", "");//restore cursor        });    $panzoom.parent()        .on('mousewheel.focal', function (e) {            //if Control pressed then zoom            e.preventDefault();            var delta = e.delta || e.originalEvent.wheelDelta;            var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;            $panzoom.panzoom('zoom', zoomOut, {                animate: false,                exponential: false,                focal: e            });            var matrix = $panzoom.panzoom("getMatrix");            instance.setZoom(matrix[0]);            updateBG(matrix);        })        //on start store initial offsets and mouse coord        .on("mousedown touchstart", function (ev) {            if (ev.target.id == 'flowchartabscontainer' || ev.target.id == 'flowchartbg') {                var matrix = $container.find(".panzoom").panzoom("getMatrix");                var offsetX = matrix[4];                var offsetY = matrix[5];                var dragstart = {x: ev.pageX, y: ev.pageY, dx: offsetX, dy: offsetY};                $(ev.target).css("cursor", "move");                $(this).data('dragstart', dragstart);            }        })        //calculate mouse offset from starting pos and apply it to panzoom matrix        .on("mousemove touchmove", function (ev) {            var dragstart = $(this).data('dragstart');            if (dragstart) {                var deltaX = dragstart.x - ev.pageX;                var deltaY = dragstart.y - ev.pageY;                var matrix = $container.find(".panzoom").panzoom("getMatrix");                matrix[4] = parseInt(dragstart.dx) - deltaX;                matrix[5] = parseInt(dragstart.dy) - deltaY;                updateBG(matrix);                $container.find(".panzoom").panzoom("setMatrix", matrix);            }        })        .on("mouseup touchend touchcancel", function (ev) {            $(this).data('dragstart', null);            $(ev.target).css("cursor", "");        });    instance.batch(function () {        instance.bind("click", function (conn, originalEvent) {            instance.deleteConnection(conn);        });        instance.bind("connectionDrag", function (connection) {            console.log("connection " + connection.id + " is being dragged. suspendedElement is ", connection.suspendedElement, " of type ", connection.suspendedElementType);        });        instance.bind("connectionDragStop", function (connection) {            console.log("connection " + connection.id + " was dragged");        });        instance.bind("connectionMoved", function (params) {            console.log("connection " + params.connection.id + " was moved");        });    });    var updateFlowchartState = function () {        $.ajax({            type: "POST",            url: "/node_states",            success: function (data, status) {                var nodes = data.nodes;                if (nodes) {                    for (var i = 0; i < nodes.length; i++) {                        var source = nodes[i].id;                        var on = false;                        var $node = $('#' + source);                        //console.log(source, $('#' + source).length, nodes[i].values[0]);                        if (nodes[i].values.length > 0) {                            // big assumption                            if (nodes[i].values[0] != false) {                                on = true;                            }                        }                        if (on) {                            instance.select({source: source}).each(function (connection) {                                connection.setType("activeBoolean");                            });                            $node.css("box-shadow", "0 0 50px 10px #0ff");                            instance.select({source: $node}).each(function (connection) {                            });                        } else {                            instance.select({source: source}).each(function (connection) {                                connection.setType("inactiveBoolean");                            });                            $node.css("box-shadow", "none");                        }                    }                }                setTimeout(function() {updateFlowchartState();}, 1000);            },            error: function (data, status) {                console.log(data, status);            }        });    };    updateFlowchart = function () {        $.ajax({            type: "POST",            url: "/knowledge",            success: function (data, status) {                var nodes = data.nodes;                var edges = data.edges;                var newNodeIds = [];                for (var i = 0; i < nodes.length; i++) {                    var node = nodes[i];                    // do not create if it already exists                    if ($('#' + node.id).length == 0 && !nodeBlacklist.includes(node.id)) {                        if (node.type == "label") {                            console.log('adding label node');                            var newNode = newLabelNode(0, 0, node.text, node.id);                            newNodeIds.push(newNode.id);                        } else if (node.type == "image") {                            console.log('adding image node');                            var newNode = newImageNode(0, 0, node.image, node.id);                            newNodeIds.push(newNode.id);                        } else if (node.type == "action") {                            var platform_index = -1;                            for (var k = 0; k < platforms.length; k++) {                                if (node.platform == platforms[k].name) {                                    platform_index = k;                                    break;                                }                            }                            node.data.platform = platform_index;                            var newNode = newActionNode(0, 0, node.data, node.id);                            newNodeIds.push(newNode.id);                        }                    }                }                for (var i = 0; i < edges.length; i++) {                    var edge = edges[i];                    // do not create if it already exists                    // select by endpoints, not by elements                    //if (instance.select({sourceE: edge.source, target: edge.target}).length == 0) {                    //console.log('new connection: ' + edge.source + ' to ' + edge.target);                    instance.connect({                        uuids: [edge.source + '-source-' + edge.source_index,                            edge.target + '-target-' + edge.target_index                        ], editable: true                    });                    //}                }                var items = $container.find(".item");                for (var i = 0; i < items.length; i++) {                    var item = items[i];                    var remove = true;                    for (var k = 0; k < nodes.length; k++) {                        var node = nodes[k];                        var type = $('#' + node.id).data('nodeType');                        if ((type != "image" && type != "label") || node.id == item.id) {                            remove = false;                            break;                        }                    }                    if (remove) {                        console.log('removing node');                        instance.remove(item);                        nodeBlacklist.push(item.id);                    }                }                //addDraggables($container.find(".item"));                var con = $('#flowchartabscontainer');                var g = dagreLayout(newNodeIds);                var scale = 0.1;                var posX = 329;//(con.width()/2)*scale;                var posY = 59;//(con.height()/2)*scale;                var matrix = [scale, 0, 0, scale, posX, posY];                console.log(matrix);                $container.find(".panzoom").panzoom("setMatrix", matrix);                updateBG(matrix);                if (UPDATE_STATES) {                    setTimeout(function () {                        updateFlowchartState();                    }, 1000);                }                //setTimeout(function() {updateFlowchart();}, 1000);            },            error: function (data, status) {            }        });    };    //if (DEMO != 1) {        updateFlowchart();    //}    var newNode = function () {        var d = document.createElement("div");        d.className = "item";        d.innerHTML = "";        var body = document.createElement("div");        body.className = "itembody";        var $d = $(d);        $d.append($(body));        return d;    };    var $addLabel = $('#addLabel');    $addLabel.draggable({        cursorAt: {top: 0, left: 0},        start: function (event, ui) {        },        stop: function (event, ui) {            var matrix = $container.find(".panzoom").panzoom("getMatrix");            var x = (ui.offset.left - matrix[4]) / matrix[0];            var y = (ui.offset.top - matrix[5]) / matrix[0];            /*swal({                title: "New label",                text: "Enter name:",                type: 'input',                showCancelButton: true,                inputPlaceholder: '読書'            }, function(value) {                if (value) {                    newLabelNode(x, y, value);                }            });*/            $("#addLabelModal").modal();            $('#addLabelOk').unbind().click(function (e) {                e.preventDefault();                newLabelNode(x, y, $('#addLabelName').val());                $("#addLabelModal").modal('hide');                $('#newLabelForm').trigger('reset');            });        },        helper: newNode,        cancel: false    });    var checkActionValid = function () {        var selectedVal = $('#selectPlatform').val();        $('#testAction').prop('disabled', false);        if ((selectedVal != '-1' && selectedVal != null) && $('#actionName').val() != '') {            $('#actionOk').prop('disabled', false);        } else {            $('#actionOk').prop('disabled', true);        }    };    $('#actionName').keyup(function () {        checkActionValid();    });    $('#selectPlatform').change(function () {        checkActionValid();        if ($(this).val() != '-1') {            var p = platforms[$(this).val()];            var pName = p.name;            var d = $('#platform-' + pName + ' > .setParameters');            if (d.length > 0) {                $('#paramsCard').css('display', 'flex');                $('#actionParams').html(d.html());                window[pName + 'InitSetParameters']();            } else {                $('#paramsCard').css('display', 'none');            }            if (p.testable) {                $('#testAction').css('display', 'inline-block')            } else {                $('#testAction').css('display', 'none')            }            if (p.output_types.includes("action")) {                $('#additionalSettings').css('display', 'block')            } else {                $('#additionalSettings').css('display', 'none')            }            if (p.askable) {                $('#confirm').css('display', 'inline-block')            } else {                $('#confirm').css('display', 'none')            }        }    });    $('#confirmSelect').change(function () {        if ($('#confirmSelect').val() == "Always") {            $('#confirmSay').css('display', 'inline-block');        } else {            $('#confirmSay').css('display', 'none');        }    });    var initActionModal = function (mode, params) {        $('#additionalSettings').css('display', 'none');        $('#testAction').css('display', 'none');        $('#paramsCard').css('display', 'none');        $('#confirm').css('display', 'none');        $('#confirmQ').val("機器を操作しましょうか？");        $('#confirmYes').val("では操作します");        $('#confirmNo').val("では操作をしません");        $('#confirmPass').val("操作をしません");        $('confirm').val('Always');        if (mode == 'add') {            $('#actionModalTitle').text('Add node');            $('#testAction').prop('disabled', true);            $('#actionOk').text('OK');            $('#activation').val("1");            $('#starttimepicker').datetimepicker('date', moment('00:00', 'HH:mm'));            $('#endtimepicker').datetimepicker('date', moment('24:00', 'HH:mm'));            $('#activation').val('10 seconds');        } else {            $('#actionName').val(params.actionName);            $('#actionModalTitle').text('Edit node');            $('#actionOk').text('Apply');            // TODO disable and enable when changed            $('#actionOk').prop('disabled', false);            if (params.platform != null) {                $('#selectPlatform').val(params.platform);                var p = platforms[params.platform];                var pName = p.name;                if (typeof window[pName + 'InitSetParameters'] === "function") {                    $('#paramsCard').css('display', 'flex');                    $('#actionParams').html($('#platform-' + pName + ' > .setParameters').html());                    window[pName + 'InitSetParameters']();                    window[pName + 'InitFromObject'](params);                }                // redundant with selectPlatform.change                if (p.testable) {                    $('#testAction').css('display', 'inline-block')                } else {                    $('#testAction').css('display', 'none')                }                if (p.output_types.includes("action")) {                    $('#additionalSettings').css('display', 'block');                }                $("#actionModal").data('params', params);                $("#actionModal").modal();            }            $('#activation').val(params.activation);            var d = moment.utc(moment.duration(params.startTime, "m").asMilliseconds()).format("HH:mm");            $('#starttimepicker').datetimepicker('date', d);            d = moment.utc(moment.duration(params.endTime, "m").asMilliseconds()).format("HH:mm");            $('#endtimepicker').datetimepicker('date', d);            //$('#additionalSettings').css('display', 'none');            //$('#testAction').css('display', 'none');            //$('#paramsCard').css('display', 'none');            if (params.confirm != null) {                $('#confirm').css('display', 'inline-block');                $('#confirmQ').val(params.confirm_say.question);                $('#confirmYes').val(params.confirm_say.response.yes);                $('#confirmNo').val(params.confirm_say.response.no);                $('#confirmPass').val(params.confirm_say.response.none);            } else {                $('#confirm').css('display', 'none');            }        }    };    var initActionNode = function (el, body) {        //instance.addEndpoint(el, actionTargetEndpoint, {anchor: ["LeftMiddle"], uuid: el.id + '-target'});        $(body)            .click(function () {                if ($(el).hasClass('noclick')) {                    $(el).removeClass('noclick');                    return;                }                var params = $(el).data('params');                $('#actionOk').unbind().click(function (e) {                    var params = $(el).data('params');                    params = getCurrentParams(params);                    $(el).data('params', params);                    $(el).find("p").text(params.actionName);                    $.ajax({                        type: "POST",                        url: "/action",                        data: JSON.stringify({                            type: 'update',                            username: 'sean',                            id: $(el).attr('id'),                            name: params.actionName,                            platform: platforms[params.platform].name,                            data: params                        })                    });                });                initActionModal('edit', params);            });    };    var newActionNode = function (x, y, params, id) {        var platform = platforms[params.platform];        var inputs = platform.input_types;        var outputs = platform.output_types;        var n = initGeneralNode(x, y, id, inputs, outputs);        var $d = $(n.main);        if (!params.inputs) {            params.inputs = [];            for (var i = 0; i < inputs.length; i++) {                params.inputs.push([]);            }        }        $d.data('params', params);        var icon = $(platform.icon);        var fontColor = "white";        if (outputs.includes("action")) {            icon.css("color", "#EC7063");            //icon.css("color", "#F5B7B1");            n.body.style.backgroundColor = "#943126";        } else if (inputs.length == 0) {            icon.css("color", "#5499C7");            n.body.style.backgroundColor = "#1A5276";        } else {            icon.css("color", "#F2F3F4");            n.body.style.backgroundColor = "#CACFD2";            fontColor = "black";        }        var text = $('<p style="margin: 0; z-index: 2; color: ' + fontColor + '; font-weight: bold;">' + params.actionName + '</p>');        $(n.body).append(text);        $(n.body).append(icon);        initActionNode(n.main, n.body);        n.delButton.click(function () {            $.ajax({                type: "POST",                url: "/action",                data: JSON.stringify({                    type: 'remove',                    username: 'sean',                    id: id                })            });        });        instance.bind("connection", function (info, originalEvent) {            if (originalEvent != null && info.targetId == id) {                var source_tokens = info.sourceEndpoint.getUuid().split("-");                //var source_id = source_tokens[0];                var source_index = parseInt(source_tokens[source_tokens.length - 1]);                var target_tokens = info.targetEndpoint.getUuid().split("-");                //var target_id = target_tokens[0];                var target_index = parseInt(target_tokens[target_tokens.length - 1]);                $(info.target).data('params').inputs[target_index].push({"index": source_index, "id": info.source.id});                updateActionNode($(info.target));            }        });        instance.bind("connectionDetached", function (info, originalEvent) {            //console.log(originalEvent, info.targetId, id);            // null?            if (originalEvent == null && info.targetId == id) {                var source_tokens = info.sourceEndpoint.getUuid().split("-");                var source_index = parseInt(source_tokens[source_tokens.length - 1]);                var target_tokens = info.targetEndpoint.getUuid().split("-");                var target_index = parseInt(target_tokens[target_tokens.length - 1]);                var params = $(info.target).data('params');                var index = params.inputs[target_index].indexOf({"index": source_index, "id": info.source.id});                params.inputs[target_index].splice(index, 1);                updateActionNode($(info.target));            }        });        return n.main;    };    var updateActionNode = function (el) {        var params = el.data('params');        $.ajax({            type: "POST",            url: "/action",            data: JSON.stringify({                type: 'update',                username: 'sean',                id: el.attr('id'),                name: params.actionName,                platform: platforms[params.platform].name,                data: params            })        });    };    var $addAction = $('#addAction');    $('#actionModal').on('hidden.bs.modal', function () {        $('#actionName').val('');        $('#selectPlatform').val('-1');        $('#paramsCard').css('display', 'none');        $('#actionParams').empty();        $('#actionOk').prop('disabled', true);    });    var getCurrentParams = function (params) {        var pName = platforms[$('#selectPlatform').val()].name;        if (typeof window[pName + "ToObject"] === "function") {            $.extend(params, window[pName + "ToObject"]());        }        params.actionName = $('#actionName').val();        params.platform = $('#selectPlatform').val();        params.username = 'sean';        params.activation = $("#activation option:selected").text();        var startTime = $('#starttimepicker').datetimepicker('date');        var endTime = $('#endtimepicker').datetimepicker('date');        params.startTime = startTime.hour() * 60 + startTime.minute();        params.endTime = endTime.hour() * 60 + endTime.minute();        params.confirm = $('#confirmSelect').val();        if (params.confirm != "None") {            params.confirm_say = {                'question': $('#confirmQ').val(),                'response': {                    'none': $('#confirmPass').val(),                    'yes': $('#confirmYes').val(),                    'no': $('#confirmNo').val()                }            };        }        return params    };    $('#testAction').unbind().click(function (e) {        var pName = platforms[$('#selectPlatform').val()].name;        var params = getCurrentParams({});        params.username = 'sean';        params.platform = pName;        $.ajax({            type: "POST",            url: "/test_execute",            data: JSON.stringify(params)        });    });    $addAction.draggable({        cursorAt: {top: 0, left: 0},        start: function (event, ui) {        },        stop: function (event, ui) {            var matrix = $container.find(".panzoom").panzoom("getMatrix");            var x = (ui.offset.left - matrix[4]) / matrix[0];            var y = (ui.offset.top - matrix[5]) / matrix[0];            $("#actionModal").data('mode', 'add');            $("#actionModal").modal({backdrop: 'static'});            initActionModal('add');            $('#actionOk').unbind().click(function (e) {                var params = getCurrentParams({});                e.preventDefault();                var id = createuuid();                var node = newActionNode(x, y, params, id);                //addDraggables($(node));                $("#actionModal").modal('hide');                $.ajax({                    type: "POST",                    url: "/action",                    data: JSON.stringify({                        type: 'add',                        username: 'sean',                        id: id,                        name: params.actionName,                        platform: platforms[params.platform].name,                        data: params                    })                });            });        },        helper: newNode,        cancel: false    });    $(function () {        $('#starttimepicker').datetimepicker({            format: 'HH:mm',            defaultDate: moment('00:00', 'HH:mm')        });    });    $(function () {        $('#endtimepicker').datetimepicker({            format: 'HH:mm',            defaultDate: moment('24:00', 'HH:mm')        });    });});